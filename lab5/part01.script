Script started on Tue 06 Nov 2012 09:09:38 AM PST
 ____________________________________________________________________ 
/ __        __   _                            ____             _     \
| \ \      / /__| | ___ ___  _ __ ___   ___  | __ )  __ _  ___| | __ |
|  \ \ /\ / / _ \ |/ __/ _ \| '_ ` _ \ / _ \ |  _ \ / _` |/ __| |/ / |
|   \ V  V /  __/ | (_| (_) | | | | | |  __/ | |_) | (_| | (__|   <  |
|    \_/\_/ \___|_|\___\___/|_| |_| |_|\___| |____/ \__,_|\___|_|\_\ |
|                                                                    |
|   ____           _                     _                           |
|  / ___|_ __ __ _| |__   __ _ _ __ ___ | |                          |
| | |  _| '__/ _` | '_ \ / _` | '_ ` _ \| |                          |
| | |_| | | | (_| | | | | (_| | | | | | |_|                          |
|  \____|_|  \__,_|_| |_|\__,_|_| |_| |_(_)                          |
\                                                                    /
 -------------------------------------------------------------------- 
       \   ,__,
        \  (..)____
           (__)    )\
              ||--|| *
{ggreving:lab5}$ mk uninit.c
+ for CSOURCE in '$*'
+ cid + uninit.c
+ checksource uninit.c
++ echo uninit.c
++ sed 's/\.c$//'
+ EXECBIN=uninit
+ gcc -g -O0 -Wall -Wextra -std=gnu99 uninit.c -o uninit -lm
uninit.c: In function â€˜mainâ€™:
uninit.c:6: warning: unused parameter â€˜argcâ€™
uninit.c:6: warning: unused parameter â€˜argvâ€™
uninit.c:8: warning: â€˜fooâ€™ is used uninitialized in this function
uninit.c:10: warning: â€˜pointerâ€™ is used uninitialized in this function
{ggreving:lab5}$ valgrind i[Kuninit
==29899== Memcheck, a memory error detector
==29899== Copyright (C) 2002-2010, and GNU GPL'd, by Julian Seward et al.
==29899== Using Valgrind-3.6.0 and LibVEX; rerun with -h for copyright info
==29899== Command: uninit
==29899== 
==29899== Use of uninitialised value of size 8
==29899==    at 0x37AAA437BB: _itoa_word (in /lib64/libc-2.12.so)
==29899==    by 0x37AAA46367: vfprintf (in /lib64/libc-2.12.so)
==29899==    by 0x37AAA4EA29: printf (in /lib64/libc-2.12.so)
==29899==    by 0x400519: main (uninit.c:8)
==29899== 
==29899== Conditional jump or move depends on uninitialised value(s)
==29899==    at 0x37AAA437C5: _itoa_word (in /lib64/libc-2.12.so)
==29899==    by 0x37AAA46367: vfprintf (in /lib64/libc-2.12.so)
==29899==    by 0x37AAA4EA29: printf (in /lib64/libc-2.12.so)
==29899==    by 0x400519: main (uninit.c:8)
==29899== 
==29899== Conditional jump or move depends on uninitialised value(s)
==29899==    at 0x37AAA45979: vfprintf (in /lib64/libc-2.12.so)
==29899==    by 0x37AAA4EA29: printf (in /lib64/libc-2.12.so)
==29899==    by 0x400519: main (uninit.c:8)
==29899== 
==29899== Conditional jump or move depends on uninitialised value(s)
==29899==    at 0x37AAA45997: vfprintf (in /lib64/libc-2.12.so)
==29899==    by 0x37AAA4EA29: printf (in /lib64/libc-2.12.so)
==29899==    by 0x400519: main (uninit.c:8)
==29899== 
7
==29899== Use of uninitialised value of size 8
==29899==    at 0x40051E: main (uninit.c:10)
==29899== 
==29899== Invalid read of size 4
==29899==    at 0x40051E: main (uninit.c:10)
==29899==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==29899== 
==29899== 
==29899== Process terminating with default action of signal 11 (SIGSEGV)
==29899==  Access not within mapped region at address 0x0
==29899==    at 0x40051E: main (uninit.c:10)
==29899==  If you believe this happened as a result of a stack
==29899==  overflow in your program's main thread (unlikely but
==29899==  possible), you can try to increase the size of the
==29899==  main thread stack using the --main-stacksize= flag.
==29899==  The main thread stack size used in this run was 10485760.
==29899== 
==29899== HEAP SUMMARY:
==29899==     in use at exit: 0 bytes in 0 blocks
==29899==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==29899== 
==29899== All heap blocks were freed -- no leaks are possible
==29899== 
==29899== For counts of detected and suppressed errors, rerun with: -v
==29899== Use --track-origins=yes to see where uninitialised values come from
==29899== ERROR SUMMARY: 6 errors from 6 contexts (suppressed: 6 from 6)
Segmentation fault (core dumped)
{ggreving:lab5}$ echo $?
139
{ggreving:lab5}$ pstatus 139
pstatus: 0x008B TERMINATED 11: Segmentation fault (core dumped)
{ggreving:lab5}$ ec[Kxit
exit

Script done on Tue 06 Nov 2012 09:10:47 AM PST
